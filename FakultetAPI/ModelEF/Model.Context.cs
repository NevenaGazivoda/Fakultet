//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FakultetAPI.ModelEF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FakultetEntities : DbContext
    {
        public FakultetEntities()
            : base("name=FakultetEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Predmeti> Predmetis { get; set; }
        public virtual DbSet<Profesori> Profesoris { get; set; }
        public virtual DbSet<Studenti> Studentis { get; set; }
        public virtual DbSet<StudentiPredmeti> StudentiPredmetis { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual int deleteFromPredmeti(Nullable<int> idPredmeta)
        {
            var idPredmetaParameter = idPredmeta.HasValue ?
                new ObjectParameter("IdPredmeta", idPredmeta) :
                new ObjectParameter("IdPredmeta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteFromPredmeti", idPredmetaParameter);
        }
    
        public virtual int deleteFromProfesori(Nullable<int> idProfesora)
        {
            var idProfesoraParameter = idProfesora.HasValue ?
                new ObjectParameter("IdProfesora", idProfesora) :
                new ObjectParameter("IdProfesora", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteFromProfesori", idProfesoraParameter);
        }
    
        public virtual int deleteFromStudenti(Nullable<int> idStudenta)
        {
            var idStudentaParameter = idStudenta.HasValue ?
                new ObjectParameter("IdStudenta", idStudenta) :
                new ObjectParameter("IdStudenta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteFromStudenti", idStudentaParameter);
        }
    
        public virtual ObjectResult<getAllFromPredmeti_Result> getAllFromPredmeti()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllFromPredmeti_Result>("getAllFromPredmeti");
        }
    
        public virtual ObjectResult<getAllFromProfesori_Result> getAllFromProfesori()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllFromProfesori_Result>("getAllFromProfesori");
        }
    
        public virtual ObjectResult<getAllFromStudenti_Result> getAllFromStudenti()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllFromStudenti_Result>("getAllFromStudenti");
        }
    
        public virtual ObjectResult<getPredmetById_Result> getPredmetById(Nullable<int> predmetId)
        {
            var predmetIdParameter = predmetId.HasValue ?
                new ObjectParameter("PredmetId", predmetId) :
                new ObjectParameter("PredmetId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getPredmetById_Result>("getPredmetById", predmetIdParameter);
        }
    
        public virtual ObjectResult<getProfesorById_Result> getProfesorById(Nullable<int> profesorId)
        {
            var profesorIdParameter = profesorId.HasValue ?
                new ObjectParameter("ProfesorId", profesorId) :
                new ObjectParameter("ProfesorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getProfesorById_Result>("getProfesorById", profesorIdParameter);
        }
    
        public virtual ObjectResult<getStudentById_Result> getStudentById(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getStudentById_Result>("getStudentById", studentIdParameter);
        }
    
        public virtual int insertIntoPredmeti(string naziv, Nullable<int> godina, Nullable<int> profesorId)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            var godinaParameter = godina.HasValue ?
                new ObjectParameter("Godina", godina) :
                new ObjectParameter("Godina", typeof(int));
    
            var profesorIdParameter = profesorId.HasValue ?
                new ObjectParameter("ProfesorId", profesorId) :
                new ObjectParameter("ProfesorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertIntoPredmeti", nazivParameter, godinaParameter, profesorIdParameter);
        }
    
        public virtual int insertIntoProfesori(string ime, string prezime, Nullable<int> godina, string titula)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("Prezime", prezime) :
                new ObjectParameter("Prezime", typeof(string));
    
            var godinaParameter = godina.HasValue ?
                new ObjectParameter("Godina", godina) :
                new ObjectParameter("Godina", typeof(int));
    
            var titulaParameter = titula != null ?
                new ObjectParameter("Titula", titula) :
                new ObjectParameter("Titula", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertIntoProfesori", imeParameter, prezimeParameter, godinaParameter, titulaParameter);
        }
    
        public virtual int insertIntoStudenti(string ime, string prezime, Nullable<int> broj)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("Prezime", prezime) :
                new ObjectParameter("Prezime", typeof(string));
    
            var brojParameter = broj.HasValue ?
                new ObjectParameter("Broj", broj) :
                new ObjectParameter("Broj", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertIntoStudenti", imeParameter, prezimeParameter, brojParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int updateProfesori(Nullable<int> idProfesora, string ime, string prezime, Nullable<int> godina, string titula)
        {
            var idProfesoraParameter = idProfesora.HasValue ?
                new ObjectParameter("IdProfesora", idProfesora) :
                new ObjectParameter("IdProfesora", typeof(int));
    
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("Prezime", prezime) :
                new ObjectParameter("Prezime", typeof(string));
    
            var godinaParameter = godina.HasValue ?
                new ObjectParameter("Godina", godina) :
                new ObjectParameter("Godina", typeof(int));
    
            var titulaParameter = titula != null ?
                new ObjectParameter("Titula", titula) :
                new ObjectParameter("Titula", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateProfesori", idProfesoraParameter, imeParameter, prezimeParameter, godinaParameter, titulaParameter);
        }
    
        public virtual int updateToPredmeti(string naziv, Nullable<int> godina, Nullable<int> profesorId, Nullable<int> idPredmeta)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            var godinaParameter = godina.HasValue ?
                new ObjectParameter("Godina", godina) :
                new ObjectParameter("Godina", typeof(int));
    
            var profesorIdParameter = profesorId.HasValue ?
                new ObjectParameter("ProfesorId", profesorId) :
                new ObjectParameter("ProfesorId", typeof(int));
    
            var idPredmetaParameter = idPredmeta.HasValue ?
                new ObjectParameter("IdPredmeta", idPredmeta) :
                new ObjectParameter("IdPredmeta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateToPredmeti", nazivParameter, godinaParameter, profesorIdParameter, idPredmetaParameter);
        }
    
        public virtual int updateToStudenti(Nullable<int> idStudenta, string ime, string prezime, Nullable<int> broj)
        {
            var idStudentaParameter = idStudenta.HasValue ?
                new ObjectParameter("IdStudenta", idStudenta) :
                new ObjectParameter("IdStudenta", typeof(int));
    
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("Prezime", prezime) :
                new ObjectParameter("Prezime", typeof(string));
    
            var brojParameter = broj.HasValue ?
                new ObjectParameter("Broj", broj) :
                new ObjectParameter("Broj", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateToStudenti", idStudentaParameter, imeParameter, prezimeParameter, brojParameter);
        }
    }
}
